{- DO NOT EDIT THIS FILE
   THIS FILE IS AUTOMAGICALLY GENERATED AND YOUR CHANGES WILL BE EATEN BY THE GENERATOR OVERLORD

   All changes should go into the Model file (e.g. App/Models/ExampleModel.hs)
-}

module App.Models.Bases.CommentsFunctions where

import App.Models.Bases.Common
import qualified Database.HDBC as HDBC
import Data.Maybe
import System.Time

 -- My type
import App.Models.Bases.CommentsType

import Turbinado.Environment.Types
import Turbinado.Environment.Database


instance HasFindByPrimaryKey Comments  (Int64)  where
    find pk@(pk1) = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT author , body , comment_id , post_id FROM comments WHERE (comment_id = ? )") [HDBC.toSql pk1]
        case res of
          [] -> throwDyn $ HDBC.SqlError
                           {HDBC.seState = "",
                            HDBC.seNativeError = (-1),
                            HDBC.seErrorMsg = "No record found when finding by Primary Key:comments : " ++ (show pk)
                           }
          r:[] -> return $ Comments (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2)) (HDBC.fromSql (r !! 3))
          _ -> throwDyn $ HDBC.SqlError
                           {HDBC.seState = "",
                            HDBC.seNativeError = (-1),
                            HDBC.seErrorMsg = "Too many records found when finding by Primary Key:comments : " ++ (show pk)
                           }

    update m = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.run conn "UPDATE comments SET (author , body , comment_id , post_id) = (?,?,?,?) WHERE (comment_id = ? )"
                  [HDBC.toSql $ author m , HDBC.toSql $ body m , HDBC.toSql $ commentId m , HDBC.toSql $ postId m, HDBC.toSql $ commentId m]
        liftIO $ HDBC.handleSqlError $ HDBC.commit conn
        return ()
	   
    delete m = do
		conn <- getEnvironment >>= (return . fromJust . getDatabase )
		res <- liftIO $ HDBC.handleSqlError $ HDBC.run conn "UPDATE comments SET (author , body , comment_id , post_id) = (?,?,?,?) WHERE (comment_id = ? )"
		          [HDBC.toSql $ author m , HDBC.toSql $ body m , HDBC.toSql $ commentId m , HDBC.toSql $ postId m, HDBC.toSql $ commentId m]
		liftIO $ HDBC.handleSqlError $ HDBC.commit conn
		return ()

instance IsModel Comments where
    insert m returnId = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res  <- liftIO $ HDBC.handleSqlError $ HDBC.run conn (" INSERT INTO comments (author,body,comment_id,post_id) VALUES (?,?," ++ (case (commentId m) of Nothing -> "DEFAULT"; Just x -> "?") ++ ",?)")  ( [HDBC.toSql $ author m] ++ [HDBC.toSql $ body m] ++ (case (commentId m) of Nothing -> []; Just x -> [HDBC.toSql x]) ++ [HDBC.toSql $ postId m])
        liftIO $ HDBC.handleSqlError $ HDBC.commit conn
        if returnId
          then do i <- liftIO $ HDBC.catchSql (HDBC.handleSqlError $ HDBC.quickQuery' conn "SELECT lastval()" []) (\_ -> HDBC.commit conn >> (return $ [[HDBC.toSql (0 :: Int)]]) ) 
                  return $ HDBC.fromSql $ head $ head i
          else return Nothing
    findAll = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn "SELECT author , body , comment_id , post_id FROM comments" []
        return $ map (\r -> Comments (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2)) (HDBC.fromSql (r !! 3))) res
    findAllWhere ss sp = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT author , body , comment_id , post_id FROM comments WHERE (" ++ ss ++ ") ")  sp
        return $ map (\r -> Comments (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2)) (HDBC.fromSql (r !! 3))) res
    findAllOrderBy op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT author , body , comment_id , post_id FROM comments ORDER BY ?") [HDBC.toSql op]
        return $ map (\r -> Comments (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2)) (HDBC.fromSql (r !! 3))) res
    findAllWhereOrderBy ss sp op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT author , body , comment_id , post_id FROM comments WHERE (" ++ ss ++ ") ORDER BY ? ")  (sp ++ [HDBC.toSql op])
        return $ map (\r -> Comments (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2)) (HDBC.fromSql (r !! 3))) res
    findOneWhere ss sp = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT author , body , comment_id , post_id FROM comments WHERE (" ++ ss ++ ") LIMIT 1") sp
        return $ (\r -> Comments (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2)) (HDBC.fromSql (r !! 3))) (head res)
    findOneOrderBy op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT author , body , comment_id , post_id FROM comments ORDER BY ? LIMIT 1")  [HDBC.toSql op]
        return $ (\r -> Comments (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2)) (HDBC.fromSql (r !! 3))) (head res)
    findOneWhereOrderBy ss sp op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT author , body , comment_id , post_id FROM comments WHERE (" ++ ss ++ ") ORDER BY ? LIMIT 1")  (sp ++ [HDBC.toSql op])
        return $ (\r -> Comments (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2)) (HDBC.fromSql (r !! 3))) (head res)
